Last Line Bandwidth
===================

.. literalinclude:: ../lastlinebandwidth.feature
   :language: gherkin

<<name='imports', echo=False>>=
# python standard library
import random

# third-part
from behave import given, when, then
from hamcrest import assert_that, is_, equal_to

# this package
from iperflexer.sumparser import SumParser
@

Scenario: User gives human-readable iperf data and pulls summary bandwidth
--------------------------------------------------------------------------

<<name='data', wrap=False>>=
data = """
------------------------------------------------------------
Client connecting to 192.168.103.20, TCP port 5001
TCP window size: 85.0 KByte (default)
------------------------------------------------------------
[  7] local 192.168.103.17 port 60791 connected with 192.168.103.20 port 5001
[  3] local 192.168.103.17 port 60787 connected with 192.168.103.20 port 5001
[  4] local 192.168.103.17 port 60788 connected with 192.168.103.20 port 5001
[  6] local 192.168.103.17 port 60790 connected with 192.168.103.20 port 5001
[  5] local 192.168.103.17 port 60789 connected with 192.168.103.20 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0- 1.0 sec  15.1 MBytes   127 Mbits/sec
[  4]  0.0- 1.0 sec  18.6 MBytes   156 Mbits/sec
[  6]  0.0- 1.0 sec  18.1 MBytes   152 Mbits/sec
[  5]  0.0- 1.0 sec  19.6 MBytes   165 Mbits/sec
[  7]  0.0- 1.0 sec  16.2 MBytes   136 Mbits/sec
[SUM]  0.0- 1.0 sec  87.8 MBytes   736 Mbits/sec
[  7]  1.0- 2.0 sec  17.5 MBytes   147 Mbits/sec
[  3]  1.0- 2.0 sec  18.9 MBytes   158 Mbits/sec
[  4]  1.0- 2.0 sec  15.4 MBytes   129 Mbits/sec
[  6]  1.0- 2.0 sec  17.8 MBytes   149 Mbits/sec
[  5]  1.0- 2.0 sec  17.0 MBytes   143 Mbits/sec
[SUM]  1.0- 2.0 sec  86.5 MBytes   726 Mbits/sec
[  3]  2.0- 3.0 sec  17.5 MBytes   147 Mbits/sec
[  4]  2.0- 3.0 sec  21.2 MBytes   178 Mbits/sec
[  6]  2.0- 3.0 sec  16.9 MBytes   142 Mbits/sec
[  5]  2.0- 3.0 sec  15.4 MBytes   129 Mbits/sec
[  7]  2.0- 3.0 sec  15.9 MBytes   133 Mbits/sec
[SUM]  2.0- 3.0 sec  86.9 MBytes   729 Mbits/sec
[  7]  3.0- 4.0 sec  16.8 MBytes   141 Mbits/sec
[  4]  3.0- 4.0 sec  17.8 MBytes   149 Mbits/sec
[  5]  3.0- 4.0 sec  21.5 MBytes   180 Mbits/sec
[  3]  3.0- 4.0 sec  15.2 MBytes   128 Mbits/sec
[  6]  3.0- 4.0 sec  15.6 MBytes   131 Mbits/sec
[SUM]  3.0- 4.0 sec  86.9 MBytes   729 Mbits/sec
[  3]  0.0- 5.0 sec  83.9 MBytes   141 Mbits/sec
[  7]  4.0- 5.0 sec  18.1 MBytes   152 Mbits/sec
[  7]  0.0- 5.0 sec  84.6 MBytes   142 Mbits/sec
[  4]  0.0- 5.0 sec  90.6 MBytes   152 Mbits/sec
[  6]  4.0- 5.0 sec  17.8 MBytes   149 Mbits/sec
[  6]  0.0- 5.0 sec  86.2 MBytes   144 Mbits/sec
[  5]  4.0- 5.0 sec  16.1 MBytes   135 Mbits/sec
[  5]  0.0- 5.0 sec  89.8 MBytes   150 Mbits/sec
[SUM]  0.0- 5.0 sec   435 MBytes   {expected} Mbits/sec
"""
@

Example: Human Readable
~~~~~~~~~~~~~~~~~~~~~~~

<<name='human_readable_input', wrap=False>>=
@given("a data set of human-readable iperf output")
def human_readable_input(context):
    context.parser = SumParser()
    context.expected = random.randrange(800, 1000)
    human_data = data.format(expected = context.expected)
    for line in human_data.splitlines():
        context.parser(line)
    return
@

<<name='last_line_bandwidth', wrap=False>>=
@when("the user gets the last-line bandwidth")
def last_line_bandwidth(context):
    context.last_line_bandwidth = context.parser.last_line_bandwidth
    return
@

<<name='assert_iperf_summary', wrap=False>>=
@then("the last-line bandwidth is the iperf summary")
def assert_iperf_summary(context):
    assert_that(context.last_line_bandwidth,
                is_(equal_to(context.expected)))
    return
@

Example: CSV-Format
~~~~~~~~~~~~~~~~~~~

<<name='csv_data', wrap=False>>=
csv_data_sample = '''
20141222183631,192.168.10.11,55254,192.168.10.2,5001,3,0.0-1.0,3014656,24117248
20141222183631,192.168.10.11,55257,192.168.10.2,5001,6,0.0-1.0,3145728,25165824
20141222183631,192.168.10.11,55255,192.168.10.2,5001,4,0.0-1.0,3145728,25165824
20141222183631,192.168.10.11,55256,192.168.10.2,5001,5,0.0-1.0,3145728,25165824
20141222183631,192.168.10.11,0,192.168.10.2,5001,-1,0.0-1.0,12451840,99614720
20141222183632,192.168.10.11,55257,192.168.10.2,5001,6,1.0-2.0,2883584,23068672
20141222183632,192.168.10.11,55255,192.168.10.2,5001,4,1.0-2.0,2883584,23068672
20141222183632,192.168.10.11,55254,192.168.10.2,5001,3,1.0-2.0,3014656,24117248
20141222183632,192.168.10.11,55256,192.168.10.2,5001,5,1.0-2.0,2883584,23068672
20141222183632,192.168.10.11,0,192.168.10.2,5001,-1,1.0-2.0,11665408,93323264
20141222183633,192.168.10.11,55254,192.168.10.2,5001,3,2.0-3.0,2883584,23068672
20141222183633,192.168.10.11,55256,192.168.10.2,5001,5,2.0-3.0,2883584,23068672
20141222183633,192.168.10.11,55257,192.168.10.2,5001,6,2.0-3.0,3014656,24117248
20141222183633,192.168.10.11,55255,192.168.10.2,5001,4,2.0-3.0,3014656,24117248
20141222183633,192.168.10.11,0,192.168.10.2,5001,-1,2.0-3.0,11796480,94371840
20141222183634,192.168.10.11,55256,192.168.10.2,5001,5,3.0-4.0,2883584,23068672
20141222183634,192.168.10.11,55257,192.168.10.2,5001,6,3.0-4.0,2883584,23068672
20141222183634,192.168.10.11,55254,192.168.10.2,5001,3,3.0-4.0,3014656,24117248
20141222183634,192.168.10.11,55255,192.168.10.2,5001,4,3.0-4.0,2883584,23068672
20141222183634,192.168.10.11,0,192.168.10.2,5001,-1,3.0-4.0,11665408,93323264
20141222183635,192.168.10.11,55257,192.168.10.2,5001,6,4.0-5.0,2883584,23068672
20141222183635,192.168.10.11,55255,192.168.10.2,5001,4,4.0-5.0,2883584,23068672
20141222183635,192.168.10.11,55254,192.168.10.2,5001,3,4.0-5.0,2883584,23068672
20141222183635,192.168.10.11,55256,192.168.10.2,5001,5,4.0-5.0,3014656,24117248
20141222183635,192.168.10.11,0,192.168.10.2,5001,-1,4.0-5.0,11665408,93323264
20141222183636,192.168.10.11,55256,192.168.10.2,5001,5,5.0-6.0,2883584,23068672
20141222183636,192.168.10.11,55257,192.168.10.2,5001,6,5.0-6.0,3014656,24117248
20141222183636,192.168.10.11,55255,192.168.10.2,5001,4,5.0-6.0,3014656,24117248
20141222183636,192.168.10.11,55254,192.168.10.2,5001,3,5.0-6.0,3014656,24117248
20141222183636,192.168.10.11,0,192.168.10.2,5001,-1,5.0-6.0,11927552,95420416
20141222183637,192.168.10.11,55257,192.168.10.2,5001,6,6.0-7.0,2883584,23068672
20141222183637,192.168.10.11,55255,192.168.10.2,5001,4,6.0-7.0,2883584,23068672
20141222183637,192.168.10.11,55254,192.168.10.2,5001,3,6.0-7.0,2883584,23068672
20141222183637,192.168.10.11,55256,192.168.10.2,5001,5,6.0-7.0,3014656,24117248
20141222183637,192.168.10.11,0,192.168.10.2,5001,-1,6.0-7.0,11665408,93323264
20141222183638,192.168.10.11,55257,192.168.10.2,5001,6,7.0-8.0,2883584,23068672
20141222183638,192.168.10.11,55254,192.168.10.2,5001,3,7.0-8.0,2883584,23068672
20141222183638,192.168.10.11,55256,192.168.10.2,5001,5,7.0-8.0,2883584,23068672
20141222183638,192.168.10.11,55255,192.168.10.2,5001,4,7.0-8.0,3014656,24117248
20141222183638,192.168.10.11,0,192.168.10.2,5001,-1,7.0-8.0,11665408,93323264
20141222183639,192.168.10.11,55256,192.168.10.2,5001,5,8.0-9.0,2883584,23068672
20141222183639,192.168.10.11,55257,192.168.10.2,5001,6,8.0-9.0,3014656,24117248
20141222183639,192.168.10.11,55255,192.168.10.2,5001,4,8.0-9.0,2883584,23068672
20141222183639,192.168.10.11,55254,192.168.10.2,5001,3,8.0-9.0,3014656,24117248
20141222183639,192.168.10.11,0,192.168.10.2,5001,-1,8.0-9.0,11796480,94371840
20141222183640,192.168.10.11,55257,192.168.10.2,5001,6,9.0-10.0,2883584,23068672
20141222183640,192.168.10.11,55257,192.168.10.2,5001,6,0.0-10.1,29622272,23569322
20141222183640,192.168.10.11,55255,192.168.10.2,5001,4,9.0-10.0,2883584,23068672
20141222183640,192.168.10.11,55255,192.168.10.2,5001,4,0.0-10.1,29622272,23551349
20141222183640,192.168.10.11,55254,192.168.10.2,5001,3,9.0-10.0,2883584,23068672
20141222183640,192.168.10.11,55254,192.168.10.2,5001,3,0.0-10.1,29622272,23535348
20141222183640,192.168.10.11,55256,192.168.10.2,5001,5,9.0-10.0,3014656,24117248
20141222183640,192.168.10.11,0,192.168.10.2,5001,-1,9.0-10.0,11665408,93323264
20141222183640,192.168.10.11,55256,192.168.10.2,5001,5,0.0-10.1,29622272,23489978
20141222183640,192.168.10.11,0,192.168.10.2,5001,-1,0.0-10.1,118489088,{expected}
'''
@

<<name='csv_input', wrap=False>>=
@given("a data set of csv-formatted iperf output")
def csv_input(context):
    context.parser = SumParser(units='bits')
    context.expected = random.randrange(800, 1000)

    csv_data = csv_data_sample.format(expected = context.expected)
    for line in csv_data.splitlines():
        context.parser(line)
    return
@
